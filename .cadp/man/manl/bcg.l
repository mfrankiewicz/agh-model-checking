.\" @(#)bcg.l - VASY and CONVECS teams - 2016/08/24
.TH BCG LOCAL "2016/08/24" "(C) INRIA" "CADP MANUAL PAGES"
.fp 4 CB
.lg 0
.SH NAME
bcg, BCG \- Binary Coded Graphs: binary file format for labelled transition systems

.SH DESCRIPTION

The acronym \fIBCG\fP stands for \fIB\fPinary \fIC\fPoded \fIG\fPraphs.
It refers both to a format and a software environment.
.P
The \fIBCG format\fP is a computer representation for labelled transition 
systems, Kripke structures, and, more generally, state/transition models
(hereafter called \fIgraphs\fP) which are generated from higher-level models
of concurrent systems. 
.P
Compared to other existing formats with similar purposes, the BCG format 
combines several advantages:
.IP -
The BCG format is independent from any particular model-based verification 
technique; it can be used either by tools performing graph comparison and
reduction modulo equivalence relations, or by tools checking properties 
expressed in temporal logics. It can also be used in other contexts:
graph exploration, graph drawing, etc.
.IP -
The BCG format is independent from the language used to describe the
concurrent system to be analyzed. It was designed so as to allow the
representation of graphs generated from various concurrent languages.
.IP -
The BCG format provides sophisticated mechanisms to keep track of
source-level information. This is especially useful, since it is
possible to establish a connection between the behaviour of a BCG
graph and the source program from which the BCG graph was generated.
.IP -
The BCG format uses a binary representation of the LTS together
with ad-hoc compression algorihms, leading to very compact files.
Graphs with millions of states and transitions can be represented 
using only a few megabytes of disk space.
.P
Moreover, the BCG format is supported by an efficient and extensive
software implementation, the \fIBCG environment\fP.

.SH APPLICATION TOOLS

In the BCG environment, the programs dealing with graphs encoded in the 
BCG format are called ``application tools''. These programs can be
either binary programs or shell-scripts.
.P
The following application tools are currently available (see the 
corresponding manual pages):
.TP
.BR bcg_cmp (LOCAL)
Compare normal, probabilistic, or stochastic BCG graphs 
.TP 
.BR bcg_draw (LOCAL)
Display BCG graphs
.TP
.BR bcg_edit (LOCAL)
Edit PostScript files generated by
.BR bcg_draw (LOCAL)
.TP
.BR bcg_info (LOCAL)
Print information about BCG graphs
.TP
.BR bcg_io (LOCAL)
Convert graphs from and to the BCG format
.TP
.BR bcg_graph (LOCAL)
Generate various kinds of useful BCG graphs
.TP
.BR bcg_labels (LOCAL)
Hide/rename labels of graph encoded to the BCG format
.TP
.BR bcg_lib (LOCAL)
Generate dynamic libraries for BCG graphs
.TP
.BR bcg_min (LOCAL)
Minimize of normal, probabilistic, or stochastic BCG graphs 
.TP
.BR bcg_open (LOCAL)
Execute OPEN/CAESAR application programs on BCG graphs
.TP
.BR bcg_steady (LOCAL)
Perform steady-state analysis on Markov chains encoded in the BCG format
.TP
.BR bcg_transient (LOCAL)
Perform transient analysis on Markov chains encoded in the BCG format
.P
Application Programming Interfaces for reading and/or writing BCG files
from C or C++ programs are described in the
.BR bcg_read (LOCAL)
and
.BR bcg_write (LOCAL)
manual pages.

.SH B\&C\&G FILES
Graphs encoded in the BCG format are stored in files
having the \fB.bcg\fP suffix. These files contain binary
data, which are not directly readable by the user.
.P
There are currently several ways of generating a BCG file:
.IP -
The
.BR caesar (LOCAL)
tool can generate a BCG graph corresponding to a LOTOS description.
.IP -
The
.BR bcg_io (LOCAL)
application program can be used to translate an existing graph into a
BCG graph.
.IP -
The
.BR generator (LOCAL)
and
.BR reductor (LOCAL)
programs of the OPEN/CAESAR environment can be used to generate a BCG
graph.

.SH HOW TO CREATE A B\&C\&G GRAPH

If you want to create a BCG graph by yourself, please consult the 
.BR bcg_write (LOCAL)
manual page.

.SH HOW TO READ A B\&C\&G GRAPH

If you want to read a BCG graph by yourself, please consult the
.BR bcg_read (LOCAL)
manual page.

.SH STATIC LIBRARIES

Application tools rely on libraries of compiled object code
provided with the BCG environment. These libraries are 
called ``static libraries''. They are not directly visible
by the user.
.P
Caution: the contents of static libraries are undocumented
and subject to future changes.

.SH DYNAMIC LIBRARIES

In order to access the informations contained in BCG files,
application programs have to generate various files containing 
compiled object code.
.P
These files are called ``dynamic libraries'' since they depend
on BCG files to be accessed, which is not the case of ``static 
libraries''.
.P
For a given BCG file \fIfilename\fP\fB.bcg\fP, the corresponding
dynamic libraries are files named \fIfilename\fP\fB@1.o\fP,
\fIfilename\fP\fB@2.o\fP, etc. They are stored in the same directory
as the BCG file itself.
.P
Dynamic libraries can be safely removed: if they are necessary,
they will be generated again by application tools. However,
it is advised not to delete them systematically, since their
generation takes a certain amount of time.
.P
Caution: the contents of dynamic libraries are undocumented
and subject to future changes.

.SH ENVIRONMENT VARIABLES

Environment variables are defined and used according to UNIX 
conventions: see the \fBset\fP and \fBunset\fP commands of the UNIX
shells \fBsh\fP(1) and \fBcsh\fP(1), and also the manual pages for
\fBenviron\fP(5), \fBgetenv\fP(3), and \fBputenv\fP(3). 
.P
Environment variables are taken into account by all application tools.
.P
The following environment variables are defined:
.TP
.B $CADP_CC
If this variable is set, its value determines the name of the C compiler 
that will be invoked by application tools. See file \fB$CADP/INSTALLATION_2\fP
for detailed information about this variable. If this variable is unset,
the script-shell \fB$CADP/src/com/cadp_cc\fP will automatically determine
the C compiler to be used by default.
.TP
.B $CADP_TMP 
If this variable is set, its value determines the directory 
in which temporary files will be created by application tools. 
If this variable is unset, it is given the default value '\fB/tmp\fP'.
The names of temporary files are always be prefixed with the string 
``\fBbcg_\fP''.
.TP
.B $BCG\ \ \ \ \ \ 
If this variable is set, its value should reference the directory
in which the BCG package is installed. 
By default, this variable is supposed to be unset: the BCG package
is normally installed in the directory referenced by the environment 
variable \fB$CADP\fP. 
Setting this variable should be avoided in official distributions of 
the BCG package, since it may cause problems.
.TP
.B $BCG_DEBUG
If this variable is set, diagnostic messages (which can be 
helpful in debugging) are displayed on the standard error stream.
By default, this variable is supposed to be unset.
Setting this variable has no effect in official distributions of 
the BCG package.

.SH GENERAL OPTIONS

There exist command-line options which are common to many, if not
all, application tools. Their meaning is the same in all the 
applications tools that support these options.
.P
Unless stated otherwise, general options can appear at any place on 
the command-line when an application tool is invoked.
.P
The following general options are currently available:
.TP
.B \-version
Display the current version number of the application tool and stop.
To be effective, this option should occur as the first argument on
the command line. Subsequent options, if any, will be discarded. 
.TP
.B \-create
Force the dynamic library to be created, even if it already exists
in the current directory and if it is up-to-date. 
Not a default option.
.TP
.B \-update
Do not create the dynamic library if it already exists in the current
directory and if it is up-to-date. Default option.
.TP
.B \-remove
Remove the dynamic library after usage. Not a default option.
.TP
.BI \-cc \ options
Pass \fIoptions\fP to the C compiler when creating dynamic libraries.
\fIoptions\fP is a list of compiler options (enclosed in quotes or double 
quotes). These options are appended to the compiler options, if any, 
contained in the \fB$CADP_CC\fP environment variable (see ENVIRONMENT 
VARIABLES below). Not a default option.
.TP
.BI \-tmp \ directory
Use \fIdirectory\fP to store temporary files.
If present, this option overrides the environment variable \fB$CADP_TMP\fP.
.TP
.B \-uncompress
Represent the edges of the graph using an edge area of code 1.
This option is only meaningful when a BCG graph is to be created.
Not a default option.
.TP
.B \-compress
Represent the edges of the graph using an edge area of code 2.
This option is only meaningful when a BCG graph is to be created.
Default option.
.TP
.BI \-register \ register_size
Use \fIregister_size\fP bits to encode registers offsets. 
This option is only meaningful when a BCG graph is to be created
with an edge area of code 2. By default, \fIregister_size\fP is 
equal to 4.
.TP
.BI \-short \ short_size
Use \fIshort_size\fP bits to encode short branch offsets. 
This option is only meaningful when a BCG graph is to be created
with an edge area of code 2. By default, \fIshort_size\fP is 
equal to 1.
.TP
.BI \-medium \ medium_size
Use \fImedium_size\fP bits to encode medium offsets. 
This option is only meaningful when a BCG graph is to be created
with an edge area of code 2. By default, \fImedium_size\fP is 
equal to 3.
.TP
.BI \-size \ register_size\ short_size\ medium_size
This option is equivalent to the simultaneous occurrence of the three
following options: \fB-register\fP \fIregister_size\fP, \fB-short\fP
\fIshort_size\fP, and \fB-medium\fP \fImedium_size\fP.

.SH PARTICULAR OPTIONS

Besides general options, application tools can also accept their own
options, which are not shared with other application tools. These
particular options will be described in the manual pages of each
application tools.

.SH DIAGNOSTICS
Application tools share common conventions with respect to diagnostics.
Exit status is 0 if everything is alright, 1 otherwise.

.SH AUTHORS
Hubert Garavel (definition of the BCG format) and 
Renaud Ruffiot (implementation of the BCG environment).

.SH FILES

.PD 0
.TP 35
.B *.bcg\ \ \ \ \ \ 
BCG files
.TP
.B *@1.o, *@2.o, etc.
dynamic libraries
.TP
.B $CADP/incl/bcg_*
include files
.TP
.B $CADP/com/bcg_*
shell-scripts
.TP
.B $CADP/src/com/cadp_cc
C compiler shell
.TP
.B $CADP/src/*/*
various source files  
.TP
.B $CADP/bin.`arch`/bcg_*
binary programs
.TP
.B $CADP/bin.`arch`/libbcg_*.a
static libraries
.TP
.B $CADP/bin.`arch`/libBCG_*.a
static libraries
.TP
.B $CADP_TMP/bcg_*
temporary files
.PD

.SH SEE ALSO
.BR bcg_draw (LOCAL),
.BR bcg_edit (LOCAL),
.BR bcg_graph (LOCAL),
.BR bcg_info (LOCAL),
.BR bcg_io (LOCAL),
.BR bcg_lib (LOCAL),
.BR bcg_min (LOCAL),
.BR bcg_open (LOCAL),
.BR bcg_read (LOCAL),
.BR bcg_steady (LOCAL),
.BR bcg_transient (LOCAL),
.BR bcg_write (LOCAL).
.P
Additional information is available from the CADP Web page located at
http://cadp.inria.fr
.P
Directives for installation are given in files \fB$CADP/INSTALLATION_*\fP.
.P
Recent changes and improvements to this software are reported
and commented in file \fB$CADP/HISTORY\fP.
.SH BUGS
Please report bugs to Hubert.Garavel@inria.fr
