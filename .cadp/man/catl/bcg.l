


CADP MANUAL PAGES                                      BCG(LOCAL)



NNNNAAAAMMMMEEEE
     bcg, BCG - Binary  Coded  Graphs:  binary  file  format  for
     labelled transition systems


DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
     The acronym _B_C_G stands for _Binary _Coded _Graphs.   It  refers
     both to a format and a software environment.

     The _B_C_G _f_o_r_m_a_t is a  computer  representation  for  labelled
     transition  systems, Kripke structures, and, more generally,
     state/transition models (hereafter called _g_r_a_p_h_s) which  are
     generated from higher-level models of concurrent systems.

     Compared to other existing formats  with  similar  purposes,
     the BCG format combines several advantages:

     -    The BCG  format  is  independent  from  any  particular
          model-based  verification  technique;  it  can  be used
          either by tools performing graph comparison and  reduc-
          tion modulo equivalence relations, or by tools checking
          properties expressed in temporal logics. It can also be
          used in other contexts:  graph exploration, graph draw-
          ing, etc.

     -    The BCG format is independent from the language used to
          describe  the  concurrent system to be analyzed. It was
          designed so as to allow the  representation  of  graphs
          generated from various concurrent languages.

     -    The BCG format  provides  sophisticated  mechanisms  to
          keep  track  of source-level information. This is espe-
          cially useful, since it is possible to establish a con-
          nection  between  the  behaviour of a BCG graph and the
          source program from which the BCG graph was generated.

     -    The BCG format uses a binary representation of the  LTS
          together  with ad-hoc compression algorihms, leading to
          very compact files.  Graphs with millions of states and
          transitions  can  be represented using only a few mega-
          bytes of disk space.

     Moreover, the BCG format is supported by  an  efficient  and
     extensive software implementation, the _B_C_G _e_n_v_i_r_o_n_m_e_n_t.


AAAAPPPPPPPPLLLLIIIICCCCAAAATTTTIIIIOOOONNNN TTTTOOOOOOOOLLLLSSSS
     In the BCG environment, the  programs  dealing  with  graphs
     encoded  in the BCG format are called ``application tools''.
     These programs can  be  either  binary  programs  or  shell-
     scripts.




(C) INRIA            Last change: 2016/08/24                    1






CADP MANUAL PAGES                                      BCG(LOCAL)



     The following application tools are currently available (see
     the corresponding manual pages):

     bbbbccccgggg____ccccmmmmpppp(LOCAL)
          Compare normal, probabilistic, or stochastic BCG graphs

     bbbbccccgggg____ddddrrrraaaawwww(LOCAL)
          Display BCG graphs

     bbbbccccgggg____eeeeddddiiiitttt(LOCAL)
          Edit PostScript files generated by bbbbccccgggg____ddddrrrraaaawwww(LOCAL)

     bbbbccccgggg____iiiinnnnffffoooo(LOCAL)
          Print information about BCG graphs

     bbbbccccgggg____iiiioooo(LOCAL)
          Convert graphs from and to the BCG format

     bbbbccccgggg____ggggrrrraaaapppphhhh(LOCAL)
          Generate various kinds of useful BCG graphs

     bbbbccccgggg____llllaaaabbbbeeeellllssss(LOCAL)
          Hide/rename labels of graph encoded to the BCG format

     bbbbccccgggg____lllliiiibbbb(LOCAL)
          Generate dynamic libraries for BCG graphs

     bbbbccccgggg____mmmmiiiinnnn(LOCAL)
          Minimize of normal, probabilistic,  or  stochastic  BCG
          graphs

     bbbbccccgggg____ooooppppeeeennnn(LOCAL)
          Execute OPEN/CAESAR application programs on BCG graphs

     bbbbccccgggg____sssstttteeeeaaaaddddyyyy(LOCAL)
          Perform steady-state analysis on Markov chains  encoded
          in the BCG format

     bbbbccccgggg____ttttrrrraaaannnnssssiiiieeeennnntttt(LOCAL)
          Perform transient analysis on Markov chains encoded  in
          the BCG format

     Application Programming Interfaces for reading and/or  writ-
     ing  BCG  files  from C or C++ programs are described in the
     bbbbccccgggg____rrrreeeeaaaadddd(LOCAL) and bbbbccccgggg____wwwwrrrriiiitttteeee(LOCAL) manual pages.


BBBBCCCCGGGG FFFFIIIILLLLEEEESSSS
     Graphs encoded in the BCG format are stored in files  having
     the  ....bbbbccccgggg suffix. These files contain binary data, which are
     not directly readable by the user.




(C) INRIA            Last change: 2016/08/24                    2






CADP MANUAL PAGES                                      BCG(LOCAL)



     There are currently several ways of generating a BCG file:

     -    The  ccccaaaaeeeessssaaaarrrr(LOCAL)  tool  can  generate  a  BCG   graph
          corresponding to a LOTOS description.

     -    The bbbbccccgggg____iiiioooo(LOCAL) application program can  be  used  to
          translate an existing graph into a BCG graph.

     -    The ggggeeeennnneeeerrrraaaattttoooorrrr(LOCAL) and  rrrreeeedddduuuuccccttttoooorrrr(LOCAL)  programs  of
          the  OPEN/CAESAR  environment can be used to generate a
          BCG graph.


HHHHOOOOWWWW TTTTOOOO CCCCRRRREEEEAAAATTTTEEEE AAAA BBBBCCCCGGGG GGGGRRRRAAAAPPPPHHHH
     If you want to create a BCG graph by yourself,  please  con-
     sult the bbbbccccgggg____wwwwrrrriiiitttteeee(LOCAL) manual page.


HHHHOOOOWWWW TTTTOOOO RRRREEEEAAAADDDD AAAA BBBBCCCCGGGG GGGGRRRRAAAAPPPPHHHH
     If you want to read a BCG graph by yourself, please  consult
     the bbbbccccgggg____rrrreeeeaaaadddd(LOCAL) manual page.


SSSSTTTTAAAATTTTIIIICCCC LLLLIIIIBBBBRRRRAAAARRRRIIIIEEEESSSS
     Application tools rely on libraries of compiled object  code
     provided  with  the  BCG  environment.  These  libraries are
     called ``static libraries''. They are not  directly  visible
     by the user.

     Caution: the contents of static libraries  are  undocumented
     and subject to future changes.


DDDDYYYYNNNNAAAAMMMMIIIICCCC LLLLIIIIBBBBRRRRAAAARRRRIIIIEEEESSSS
     In order to access the informations contained in BCG  files,
     application programs have to generate various files contain-
     ing compiled object code.

     These files are  called  ``dynamic  libraries''  since  they
     depend on BCG files to be accessed, which is not the case of
     ``static libraries''.

     For a given BCG file _f_i_l_e_n_a_m_e....bbbbccccgggg, the corresponding dynamic
     libraries  are  files named _f_i_l_e_n_a_m_e@@@@1111....oooo, _f_i_l_e_n_a_m_e@@@@2222....oooo, etc.
     They are stored in  the  same  directory  as  the  BCG  file
     itself.

     Dynamic libraries can be safely removed: if they are  neces-
     sary,  they  will  be  generated again by application tools.
     However, it is advised not to  delete  them  systematically,
     since their generation takes a certain amount of time.




(C) INRIA            Last change: 2016/08/24                    3






CADP MANUAL PAGES                                      BCG(LOCAL)



     Caution: the contents of dynamic libraries are  undocumented
     and subject to future changes.


EEEENNNNVVVVIIIIRRRROOOONNNNMMMMEEEENNNNTTTT VVVVAAAARRRRIIIIAAAABBBBLLLLEEEESSSS
     Environment variables are defined and used according to UNIX
     conventions:  see  the  sssseeeetttt  and  uuuunnnnsssseeeetttt commands of the UNIX
     shells sssshhhh(1) and ccccsssshhhh(1),  and  also  the  manual  pages  for
     eeeennnnvvvviiiirrrroooonnnn(5), ggggeeeetttteeeennnnvvvv(3), and ppppuuuutttteeeennnnvvvv(3).

     Environment variables are taken into account by all applica-
     tion tools.

     The following environment variables are defined:

     $$$$CCCCAAAADDDDPPPP____CCCCCCCC
          If this variable is set, its value determines the  name
          of  the  C compiler that will be invoked by application
          tools.  See  file  $$$$CCCCAAAADDDDPPPP////IIIINNNNSSSSTTTTAAAALLLLLLLLAAAATTTTIIIIOOOONNNN____2222  for   detailed
          information  about  this  variable. If this variable is
          unset,  the  script-shell  $$$$CCCCAAAADDDDPPPP////ssssrrrrcccc////ccccoooommmm////ccccaaaaddddpppp____cccccccc   will
          automatically  determine  the  C compiler to be used by
          default.

     $$$$CCCCAAAADDDDPPPP____TTTTMMMMPPPP
          If this variable  is  set,  its  value  determines  the
          directory  in  which temporary files will be created by
          application tools. If this variable  is  unset,  it  is
          given the default value '////ttttmmmmpppp'.  The names of temporary
          files are always be prefixed with the string ``bbbbccccgggg____''.

     $$$$BBBBCCCCGGGG
          If this variable is set, its value should reference the
          directory  in  which  the  BCG package is installed. By
          default, this variable is supposed to be unset: the BCG
          package  is  normally installed in the directory refer-
          enced by the environment variable $$$$CCCCAAAADDDDPPPP.  Setting  this
          variable should be avoided in official distributions of
          the BCG package, since it may cause problems.

     $$$$BBBBCCCCGGGG____DDDDEEEEBBBBUUUUGGGG
          If this variable is set, diagnostic messages (which can
          be  helpful in debugging) are displayed on the standard
          error stream.  By default, this variable is supposed to
          be unset.  Setting this variable has no effect in offi-
          cial distributions of the BCG package.


GGGGEEEENNNNEEEERRRRAAAALLLL OOOOPPPPTTTTIIIIOOOONNNNSSSS
     There exist command-line options which are common  to  many,
     if  not all, application tools. Their meaning is the same in
     all the applications tools that support these options.



(C) INRIA            Last change: 2016/08/24                    4






CADP MANUAL PAGES                                      BCG(LOCAL)



     Unless stated otherwise, general options can appear  at  any
     place  on  the  command-line  when  an  application  tool is
     invoked.

     The following general options are currently available:

     -vvvveeeerrrrssssiiiioooonnnn
          Display the current version number of  the  application
          tool  and  stop.   To  be effective, this option should
          occur as the first argument on the command line. Subse-
          quent options, if any, will be discarded.

     -ccccrrrreeeeaaaatttteeee
          Force the dynamic library to be  created,  even  if  it
          already  exists  in  the current directory and if it is
          up-to-date. Not a default option.

     -uuuuppppddddaaaatttteeee
          Do not create the dynamic library if it already  exists
          in  the  current  directory  and  if  it is up-to-date.
          Default option.

     -rrrreeeemmmmoooovvvveeee
          Remove the dynamic library after usage. Not  a  default
          option.

     -cccccccc _o_p_t_i_o_n_s
          Pass _o_p_t_i_o_n_s to the C compiler  when  creating  dynamic
          libraries.   _o_p_t_i_o_n_s  is  a  list  of  compiler options
          (enclosed in quotes or double  quotes).  These  options
          are appended to the compiler options, if any, contained
          in the $$$$CCCCAAAADDDDPPPP____CCCCCCCC environment variable  (see  ENVIRONMENT
          VARIABLES below). Not a default option.

     -ttttmmmmpppp _d_i_r_e_c_t_o_r_y
          Use _d_i_r_e_c_t_o_r_y to store temporary  files.   If  present,
          this   option   overrides   the   environment  variable
          $$$$CCCCAAAADDDDPPPP____TTTTMMMMPPPP.

     -uuuunnnnccccoooommmmpppprrrreeeessssssss
          Represent the edges of the graph using an edge area  of
          code  1.   This  option  is  only meaningful when a BCG
          graph is to be created.  Not a default option.

     -ccccoooommmmpppprrrreeeessssssss
          Represent the edges of the graph using an edge area  of
          code  2.   This  option  is  only meaningful when a BCG
          graph is to be created.  Default option.

     -rrrreeeeggggiiiisssstttteeeerrrr _r_e_g_i_s_t_e_r__s_i_z_e
          Use _r_e_g_i_s_t_e_r__s_i_z_e bits  to  encode  registers  offsets.
          This  option  is only meaningful when a BCG graph is to



(C) INRIA            Last change: 2016/08/24                    5






CADP MANUAL PAGES                                      BCG(LOCAL)



          be created with an edge area of  code  2.  By  default,
          _r_e_g_i_s_t_e_r__s_i_z_e is equal to 4.

     -sssshhhhoooorrrrtttt _s_h_o_r_t__s_i_z_e
          Use _s_h_o_r_t__s_i_z_e bits to  encode  short  branch  offsets.
          This  option  is only meaningful when a BCG graph is to
          be created with an edge area of  code  2.  By  default,
          _s_h_o_r_t__s_i_z_e is equal to 1.

     -mmmmeeeeddddiiiiuuuummmm _m_e_d_i_u_m__s_i_z_e
          Use _m_e_d_i_u_m__s_i_z_e bits to  encode  medium  offsets.  This
          option  is  only  meaningful  when a BCG graph is to be
          created with an  edge  area  of  code  2.  By  default,
          _m_e_d_i_u_m__s_i_z_e is equal to 3.

     -ssssiiiizzzzeeee _r_e_g_i_s_t_e_r__s_i_z_e _s_h_o_r_t__s_i_z_e _m_e_d_i_u_m__s_i_z_e
          This  option  is   equivalent   to   the   simultaneous
          occurrence  of  the  three following options: ----rrrreeeeggggiiiisssstttteeeerrrr
          _r_e_g_i_s_t_e_r__s_i_z_e,   ----sssshhhhoooorrrrtttt   _s_h_o_r_t__s_i_z_e,    and    ----mmmmeeeeddddiiiiuuuummmm
          _m_e_d_i_u_m__s_i_z_e.


PPPPAAAARRRRTTTTIIIICCCCUUUULLLLAAAARRRR OOOOPPPPTTTTIIIIOOOONNNNSSSS
     Besides general options, application tools can  also  accept
     their  own options, which are not shared with other applica-
     tion tools. These particular options will  be  described  in
     the manual pages of each application tools.


DDDDIIIIAAAAGGGGNNNNOOOOSSSSTTTTIIIICCCCSSSS
     Application tools share common conventions with  respect  to
     diagnostics.   Exit  status is 0 if everything is alright, 1
     otherwise.


AAAAUUUUTTTTHHHHOOOORRRRSSSS
     Hubert Garavel (definition of the  BCG  format)  and  Renaud
     Ruffiot (implementation of the BCG environment).


FFFFIIIILLLLEEEESSSS
     ****....bbbbccccgggg                              BCG files
     ****@@@@1111....oooo,,,, ****@@@@2222....oooo,,,, eeeettttcccc....                 dynamic libraries
     $$$$CCCCAAAADDDDPPPP////iiiinnnnccccllll////bbbbccccgggg____****                   include files
     $$$$CCCCAAAADDDDPPPP////ccccoooommmm////bbbbccccgggg____****                    shell-scripts
     $$$$CCCCAAAADDDDPPPP////ssssrrrrcccc////ccccoooommmm////ccccaaaaddddpppp____cccccccc              C compiler shell
     $$$$CCCCAAAADDDDPPPP////ssssrrrrcccc////****////****                      various source files
     $$$$CCCCAAAADDDDPPPP////bbbbiiiinnnn....````aaaarrrrcccchhhh````////bbbbccccgggg____****             binary programs
     $$$$CCCCAAAADDDDPPPP////bbbbiiiinnnn....````aaaarrrrcccchhhh````////lllliiiibbbbbbbbccccgggg____****....aaaa        static libraries
     $$$$CCCCAAAADDDDPPPP////bbbbiiiinnnn....````aaaarrrrcccchhhh````////lllliiiibbbbBBBBCCCCGGGG____****....aaaa        static libraries
     $$$$CCCCAAAADDDDPPPP____TTTTMMMMPPPP////bbbbccccgggg____****                    temporary files




(C) INRIA            Last change: 2016/08/24                    6






CADP MANUAL PAGES                                      BCG(LOCAL)



SSSSEEEEEEEE AAAALLLLSSSSOOOO
     bbbbccccgggg____ddddrrrraaaawwww(LOCAL),     bbbbccccgggg____eeeeddddiiiitttt(LOCAL),      bbbbccccgggg____ggggrrrraaaapppphhhh(LOCAL),
     bbbbccccgggg____iiiinnnnffffoooo(LOCAL),        bbbbccccgggg____iiiioooo(LOCAL),       bbbbccccgggg____lllliiiibbbb(LOCAL),
     bbbbccccgggg____mmmmiiiinnnn(LOCAL),      bbbbccccgggg____ooooppppeeeennnn(LOCAL),       bbbbccccgggg____rrrreeeeaaaadddd(LOCAL),
     bbbbccccgggg____sssstttteeeeaaaaddddyyyy(LOCAL), bbbbccccgggg____ttttrrrraaaannnnssssiiiieeeennnntttt(LOCAL), bbbbccccgggg____wwwwrrrriiiitttteeee(LOCAL).

     Additional information is available from the CADP  Web  page
     located at http://cadp.inria.fr

     Directives   for   installation   are   given    in    files
     $$$$CCCCAAAADDDDPPPP////IIIINNNNSSSSTTTTAAAALLLLLLLLAAAATTTTIIIIOOOONNNN____****.

     Recent  changes  and  improvements  to  this  software   are
     reported and commented in file $$$$CCCCAAAADDDDPPPP////HHHHIIIISSSSTTTTOOOORRRRYYYY.

BBBBUUUUGGGGSSSS
     Please report bugs to Hubert.Garavel@inria.fr






































(C) INRIA            Last change: 2016/08/24                    7



