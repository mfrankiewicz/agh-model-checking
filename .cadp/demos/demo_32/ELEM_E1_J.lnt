(******************************************************************************
 *             Sequentially consistent, distributed cache memory
 *-----------------------------------------------------------------------------
 *   INRIA - Unite de Recherche Rhone-Alpes
 *   655, avenue de l'Europe
 *   38330 Montbonnot Saint Martin
 *   FRANCE
 *-----------------------------------------------------------------------------
 *   Module       :       ELEM_E1_J.lnt
 *   Authors      :       A. Kriouile, W. Serwe, and H. Garavel
 *   Version      :       1.0
 *   Date         :       2012/05/21 17:18:47
 *****************************************************************************)

module ELEM_E1_J is
-- scenario with two processes and one element e1

-------------------------------------------------------------------------------

type INDEX is
   -- contains exactly as many elements as processes in the system
   1, 2
   with "=="
end type

-------------------------------------------------------------------------------

type ELEM is
   -- elements represent pairs (address, datum); as in the abstract program
   -- the actual addresses or data are not needed, it is sufficient to have
   -- functions:
   -- (a) "first" telling if two elements have the same component "address"
   -- (b) "datum" telling which process may write which elements
   eps, e1
   with "card", "==", "<"
   -- "<" is an arbitrary lexical order between elements different from eps
   -- which is used to have a normal form of sets and memories; it is needed
   -- only if there are at least two elements different from eps
end type

-------------------------------------------------------------------------------

function first (E1, E2 : elem) : Bool is
   -- expresses that two elements (may) have the same address component
   return (E1 == E2) or ((E1 == eps) or (E2 == eps))
end function

-------------------------------------------------------------------------------

function datum (I : index, E : elem) : Bool is
   -- true iff element E may be written by process having index I
   case I in
      2 -> return true
    | 1 -> return E == eps
   end case
end function

-------------------------------------------------------------------------------

end module

