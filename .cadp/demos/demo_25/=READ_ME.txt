-- CADP (CONSTRUCTION AND ANALYSIS OF DISTRIBUTED PROCESSES)
-- http://cadp.inria.fr

[Last updated: Mon Feb  1 18:08:20 CET 2016]

TITLE:

  Verification of the coherency protocol of the Cluster File System (CFS).

TOOLS:

  BCG_MIN, CAESAR, EXP/OPEN, SVL, XTL

REFERENCES:
 
  - Jean-Philippe Fassino, Utilisation d'une mémoire virtuelle
    répartie pour le support d'un système de fichiers réparti, DAE
    thesis, Université Joseph Fourier, Grenoble, June 1996.
 
  - Charles Pecheur, Advanced Modelling and Verification
    Techniques Applied to a Cluster File System, in Proceedings of the
    14th IEEE International Conference on Automated Software Engineering
    ASE-99 (Cocoa Beach, Florida, USA), October 1999.
    Extended version as INRIA Research Report 3416, May 1998.
    See
       http://cadp.inria.fr/publications/Pecheur-98.html
    and
       http://cadp.inria.fr/publications/Pecheur-99.html
    and
       http://cadp.inria.fr/case-studies/98-i-cfs.html
 
AUTHORS:

  Charles Pecheur, February 1998. The work on this application has been 
  performed from July to December 1997 and is described in the above
  publications by Charles Pecheur.

  Upgraded by Frederic Lang and Hubert Garavel, April 2001. The main 
  improvements brought are the following:

  - The Makefile written by Charles Pecheur has been replaced with a
    (much shorter) SVL script.

  - When minimizing LTSs, branching bisimulation (with the BCG_MIN tool)
    is used instead of observational equivalence (with the ALDEBARAN tool).
    As a consequence, the time needed for verification is significantly
    reduced.

  Upgraded by Wendelin Serwe, June 2009. The "cfs.t" file was added to
  use a hash table to store values of sort PktList.

FILES:

  cfs.lotos: the source LOTOS description (undocumented).

  cfs.t: settings for the PktList hash table. 

  cfs.xtl: temporal properties at the protocol level.
  data.xtl: temporal properties at the data access level.
  data_12.xtl: temporal properties for two independent CFS pages.

  demo.svl: SVL script that implements the compositional verification.

  doc/cfs.pdf: a PDF version of the fully documented LOTOS description, 
           in literate programming style.

  doc/cfs.ps.Z: a compressed PostScript version of the fully documented LOTOS 
	    description, in literate programming style.

INSTRUCTIONS:

Type:
$	svl demo
  or simply:
$	svl

After the verification, you can type
$       svl -clean demo
  or simply:
$       svl -clean
to remove all files produced during the verification.

REMARKS:

* At some points, some warning messages are emitted (see the file demo.log 
  generated by SVL execution):
	caesar -root Master1with23 cfs.lotos
	...
	#117 warning during generation:
             impossible rendez-vous detected
  These messages can be ignored, because they correspond to the initial 
  phase of the CFS protocol, which is not covered in the model generated.

* The LOTOS description has been written using Norman Ramsey's NoWeb
  literate programming system. Both cfs.lotos and cfs.ps have been
  automatically extracted from a single source document, respectively
  through NoWeb and the APERO data type compiler for the former and
  through NoWeb and the LaTeX typesetting system for the latter.

* This application uses compositional model generation; the main
  behaviour of the LOTOS description is not used. Trying to generate
  a model for the full description will blow up memory. The main
  behaviour can be explored with OPEN/CAESAR tools such as EXHIBITOR or
  XSIMULATOR (or OCIS), though.
 
* In the default case, the temporal properties are checked on the
  abstract views of the system only (abstract123.bcg, cfs123.bcg, 
  abstract123_12.bcg). XTL can also be applied to the full view 
  (complete123.bcg, see the commented lines at the end of file demo.svl).

  However, this can take a prohibitive time and even exceed the capacities
  of the XTL compiler in some cases. To avoid this, edit the XTL files by
  hand to bypass the checking of all but interesting properties, for which
  the verification is expected to converge rapidly. For convenience two 
  XTL macros 'DO' and 'DONT' have been defined; simply replace 'DO' by 
  'DONT' at the start of undesired properties in order to skip them.


