<!-- CentralStore BPEL Process   -->
<process name="CentralStore" targetNamespace="http://ourExamples.demo.com" suppressJoinFailure="yes" xmlns:tns="http://ourExamples.demo.com" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:bpelx="http://schemas.oracle.com/bpel/extension" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:cx="http://schemas.collaxa.com/xpath/extension">
	<bpelx:exec import="java.util.*"/>
	<bpelx:exec import="com.demo.ourExamples.javaexec.DBConnection"/>
	<bpelx:exec import="org.w3c.dom.Element"/>
	<bpelx:exec import="java.rmi.RemoteException"/>
	<bpelx:exec import="javax.naming.NamingException"/>
	<!-- ================================================================= -->
	<!-- PARTNERLINKS                                                      -->
	<!-- List of services participating in this BPEL process               -->
	<!-- ================================================================= -->
	<partnerLinks>
		<!-- The DummyProcess is the services that requires a dummy instantiation of this process -->
		<partnerLink name="DummyProcess" partnerLinkType="tns:CentralStore" myRole="CentralStoreProvider" partnerRole="CentralStoreRequester"/>
		<!-- The Supplier is the service provided by the Supplier BPEL process -->
		<partnerLink name="Supplier" partnerLinkType="tns:SupplierOrder" partnerRole="orderProvider" myRole="orderRequester"/>
		<!-- The LocalStore is the service that requires the instantiation of this process  -->
		<partnerLink name="LocalStore" partnerLinkType="tns:CentralStoreOrder" partnerRole="orderRequester" myRole="orderProvider"/>
	</partnerLinks>
	<!-- ================================================================= -->
	<!-- VARIABLES                                                         -->
	<!-- List of messages and XML documents used within this BPEL process  -->
	<!-- ================================================================= -->
	<variables>
		<!-- Reference to the message passed as input for a dummy instantiation  -->
		<variable name="inputCentralStore" messageType="tns:CentralStoreRequestMessage"/>
		<!-- Reference to the message that will be sent back to the DummyProcess -->
		<variable name="outputCentralStore" messageType="tns:CentralStoreResponseMessage"/>
		<!-- Reference to the message received by the LocalStore as a request of an order, or 
		     to be sent to the Supplier to make an order -->
		<variable name="productRequest" messageType="tns:ProductRequestMessage"/>
		<!-- Reference to the message to be sent back to the LocalStore as a response, or 
		     received from the CentralStore as a response -->
		<variable name="productResponse" messageType="tns:ProductResponseMessage"/>
		<variable name="available" type="xsd:boolean"/>
	</variables>
	<!-- ================================================================= -->
	<!-- ORCHESTRATION LOGIC                                               -->
	<!-- Set of activities coordinating the flow of messages across the    -->
	<!-- services integrated within this business process                  -->
	<!-- ================================================================= -->
	<sequence name="main">
		<pick createInstance="yes">
			<onMessage partnerLink="LocalStore" portType="tns:CentralStore" operation="requestProduct" variable="productRequest">
				<!-- invokation from the LocalStore -->
				<sequence>
					<!-- set default values -->
					<assign>
						<copy>
							<from expression="false()"/>
							<to variable="productResponse" part="response" query="/tns:ProductResponse/tns:response"/>
						</copy>
						<copy>
							<from expression="false()"/>
							<to variable="available"/>
						</copy>
					</assign>
					<!-- open the connection to the db to verify the availability of the product -->
					<bpelx:exec language="java" version="1.4">
						<![CDATA[
		           
   	                //read the productId 
   	                Element productId =(Element)getVariableData("productRequest", "order", "/tns:ProductRequest/tns:productId");                 
                   
                                      
                    //read the quantity requested 
   	                Element quantityReq =(Element)getVariableData("productRequest", "order", "/tns:ProductRequest/tns:quantity");    
                        
                    //read the DB name
                    Element name=(Element)getVariableData("productRequest", "DBName");
                    
                    String dbName= (String) name.getNodeValue();
                    
                    //open the connection with the DB
                    DBConnection cscDBC=new DBConnection(dbName);   
                   
                    
                    if(cscDBC.isAvailable((String) productId.getNodeValue()))
                    {
                      setVariableData("available", new Boolean("true"));
                    } /* if isAvailable */
                    
                    //close the connection with the DB
                    cscDBC.close();
                   
                   ]]>
					</bpelx:exec>
					<switch>
						<case condition="bpws:getVariableData('available')=true()">
							<sequence>
								<assign name="isAvailable">
									<copy>
										<from expression="true()">
										</from>
										<to variable="productResponse" part="response" query="/tns:ProductResponse/tns:response"/>
									</copy>
								</assign>
								<!-- send the response to the LocalStore -->
								<reply name="response" partnerLink="LocalStore" portType="tns:CentralStore" operation="requestProduct" variable="productResponse"/>
								<!-- if the order is accepted we update the stock -->
								<bpelx:exec language="java" version="1.4">
									<![CDATA[
		             
   	                             //we read the availability response  
   	                             Element isAvailable =(Element)getVariableData("productResponse", "response", "/tns:ProductResponse/tns:response");                 
   	                   
                                //read the productId 
   	                            Element productId =(Element)getVariableData("productRequest", "order", "/tns:ProductRequest/tns:productId"); 
   	                   
   	                            Boolean tempBool=new Boolean((String)isAvailable.getNodeValue());
   	                   
                                //the stock is upadated only if the requested product is available
                                if(tempBool.booleanValue())
                                {
                             
                                   DBConnection cscDBC=new DBConnection("CentralStoreStock");   
                            
                                   //read the quantity requested 
   	                               Element quantityReq =(Element)getVariableData("productRequest", "order", "/tns:ProductRequest/tns:quantity");    
   	                         
   	                               Integer tempInt = new Integer((String)quantityReq.getNodeValue());
   	                        
								   //update the quantity in the DB   	                        
   	                               cscDBC.decrease((String)productId.getNodeValue(),tempInt.intValue());
   	                        
   	                               cscDBC.close();
   	                             }
                               
                                ]]>
								</bpelx:exec>
							</sequence>
						</case>
						<otherwise>
							<sequence>
								<assign name="notAvailable">
									<copy>
										<from expression="false()">
										</from>
										<to variable="productResponse" part="response" query="/tns:ProductResponse/tns:response"/>
									</copy>
								</assign>
								<!-- send the response to the LocalStore -->
								<reply name="response" partnerLink="LocalStore" portType="tns:CentralStore" operation="requestProduct" variable="productResponse"/>
							</sequence>
						</otherwise>
					</switch>
				</sequence>
			</onMessage>
			<onMessage partnerLink="DummyProcess" portType="tns:CentralStore" operation="initiateCentralStore" variable="inputCentralStore">
				<!-- dummy instantiation -->
				<sequence>
					<!-- set default values -->
					<assign>
						<copy>
							<from expression="'000'"/>
							<to variable="productRequest" part="order" query="/tns:ProductRequest/tns:productId"/>
						</copy>
						<copy>
							<from expression="number(0)"/>
							<to variable="productRequest" part="order" query="/tns:ProductRequest/tns:quantity"/>
						</copy>
					</assign>
					<!-- verify if an order has to be made -->
					<bpelx:exec language="java" version="1.4">
						<![CDATA[
		           
                        //open the connection to the DB
                        DBConnection cscDBC=new DBConnection("CentralStoreStock");   
                   
                                              
                        //vector of productIds whose quantity is zero 
                        Vector productIds=cscDBC.extract();
                        
                        //close the connection with the DB
                        cscDBC.close();
                        
                        //productIds is empty if there are no products to order
                        
                        if(productIds.size()!=0)
                        {
                        
                          //read the first product Id 
                          String productId=(String)productIds.get(0);
                        
                         //construct the product request message
                         setVariableData("productRequest", "order",  "/tns:ProductRequest/tns:productId", new String(productId));
                        
                         //order 5 pieces of the product 
                         setVariableData("productRequest", "order",  "/tns:ProductRequest/tns:quantity",new Integer(5));
                   
                        }/* if productIds.size!=0 */
                                          
                    ]]>
					</bpelx:exec>
					<switch>
						<case condition="bpws:getVariableData('productRequest', 'order', '/tns:ProductRequest/tns:quantity')!=0">
							<sequence>
								<!-- send a request to the Supplier to refill the stock -->
								<assign>
									<copy>
										<from variable="inputCentralStore" part="DBName"/>
										<to variable="productRequest" part="DBName"/>
									</copy>
								</assign>
								<invoke name="requestProduct" partnerLink="Supplier" portType="tns:Supplier" operation="requestProduct" inputVariable="productRequest" outputVariable="productResponse"/>
								<switch>
									<case condition="bpws:getVariableData('productResponse', 'response', 'response')=true()">
										<sequence>
											<bpelx:exec language="java" version="1.4">
												<![CDATA[
		                     
   	                            //we read the availability response  
   	                            Element isAvailable =(Element)getVariableData("productResponse", "response", "/tns:ProductResponse/tns:response");                 
   	                   
                                //read the productId 
   	                            Element productId =(Element)getVariableData("productRequest", "order", "/tns:ProductRequest/tns:productId"); 
   	                   
   	                            Boolean tempBool=new Boolean((String)isAvailable.getNodeValue());
   	                   
                                //the stock is upadated only if the requested product is available
                                if(tempBool.booleanValue())
                                {
                                  //open the connection with the DB
                                  DBConnection cscDBC=new DBConnection("CentralStoreStock");   
                            
                                  //read the quantity requested 
   	                              Element quantityReq =(Element)getVariableData("productRequest", "order", "/tns:ProductRequest/tns:quantity");    
   	                    
   	                              Integer tempInt = new Integer((String)quantityReq.getNodeValue());
   	                    
   	                              //we update the quantity of the requested product 
   	                              cscDBC.increase((String)productId.getNodeValue(),tempInt.intValue());
   	                        
   	                              //close the connection with the DB
   	                              cscDBC.close();
   	                              
   	                             }/* if isAvailable */
                                ]]>
											</bpelx:exec>
										</sequence>
									</case>
								</switch>
								<assign>
									<copy>
										<from expression="true()">
										</from>
										<to variable="outputCentralStore" part="payload"/>
									</copy>
								</assign>
								<!-- callback to the DummyProcess -->
								<reply name="CentralStoreCallBack" partnerLink="DummyProcess" portType="tns:CentralStore" operation="initiateCentralStore" variable="outputCentralStore"/>
							</sequence>
						</case>
						<otherwise>
							<sequence>
								<assign>
									<copy>
										<from expression="true()">
										</from>
										<to variable="outputCentralStore" part="payload"/>
									</copy>
								</assign>
								<!-- callback to the DummyProcess -->
								<reply name="CentralStoreCallBack" partnerLink="DummyProcess" portType="tns:CentralStore" operation="initiateCentralStore" variable="outputCentralStore"/>
							</sequence>
						</otherwise>
					</switch>
				</sequence>
			</onMessage>
		</pick>
	</sequence>
</process>
