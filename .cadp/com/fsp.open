#! /bin/sh

##############################################################################
#                               F S P . O P E N
#-----------------------------------------------------------------------------
#   INRIA - Unite de Recherche Rhone-Alpes
#   655, avenue de l'Europe
#   38330 Montbonnot Saint Martin
#   FRANCE
#-----------------------------------------------------------------------------
#   Module             :       fsp.open
#   Auteur             :       Remi Herilier, Frederic Lang
#   Version            :       1.41
#   Date               :       2018/10/11 10:17:49
##############################################################################

set -e

COMMAND=`basename "$0"`
ARCH=`"$CADP"/com/arch`

FSP_LOCATION="${FSP_LOCATION:-$CADP}"
FSP2LOTOS="$FSP_LOCATION/bin.$ARCH/fsp2lotos"

REMOVE_FILES=0
# do not remove files until $PREFIX and $FSPGEN are defined

# -----------------------------------------------------------------------------

GET_BCG_FILES ()
{
	# get the BCG files occurring in the EXP.OPEN network of LTS "$1",
	# which has been generated by fsp2lotos; this assumes that there
	# cannot be two BCG files on the same line of "$1"

	if [ -f "$1" ]
	then
		grep "\.bcg" "$1" | sed -e 's/^.*\"\(.*\.bcg\)\".*$/\1/'
	fi
}

# -----------------------------------------------------------------------------

CLEAN_EXIT ()
{
	# remove files and exit
        set +e # complete execution even if a deletion fails
	if [ $REMOVE_FILES -eq 1 -a $FSPOPEN_DEBUG -eq 0 ]
	then
		# $PREFIX and $FSPGEN are defined and we are not in debug mode
		rm -r -f "$FSPGEN"
		if [ "$FSPOPEN_TRANSLATE_ONLY" != 1 ]
		then
			for BCG_FILE in `GET_BCG_FILES "$PREFIX.exp"`
			do
				"$CADP"/src/com/cadp_delete "$BCG_FILE" ""
				"$CADP"/src/com/cadp_delete `basename "$BCG_FILE" .bcg`@1.o ""
			done
			"$CADP"/src/com/cadp_delete "$PREFIX.exp" "generated by fsp2lotos"
			"$CADP"/src/com/cadp_delete "$PREFIX.ren" "generated by fsp2lotos"
		fi
	fi
	exit $1
}

# -----------------------------------------------------------------------------

FSPOPEN_MESSAGE ()
{
	if [ $FSPOPEN_SILENT -eq 0 ]
	then
		echo
		echo "$COMMAND: $@"
	fi
}

# -----------------------------------------------------------------------------

FSPOPEN_ERROR ()
{
	echo 2>&1 "$COMMAND: $@"
	CLEAN_EXIT 1
}

# -----------------------------------------------------------------------------

trap 'CLEAN_EXIT 1' 1 2 3 13 14 15

# -----------------------------------------------------------------------------

# phase 1: parsing the Fsp2Lotos options

FSPOPEN_DEBUG=0
# 1 iff option -debug

FSPOPEN_SILENT=0
# 1 iff option -silent

FSPOPEN_TRANSLATE_ONLY=0
# 1 iff OPEN/CAESAR application program is "-"

F2LFLAGS=""

EXPFLAGS=""
EXPFLAGS_DEFAULT="-silent"

SVLFLAGS=""
SVLFLAGS_DEFAULT="-silent"

while true
do
	if [ $# -lt 1 ]
	then
		FSPOPEN_ERROR "missing FSP filename argument"
	fi
	case "$1" in
		-version )
			"$FSP2LOTOS" -version
			CLEAN_EXIT 0
			;;
		-debug )
			# undocumented option
			# internal versions of fsp2lotos support -debug 
			FSPOPEN_DEBUG=1
			F2LFLAGS="$F2LFLAGS $1"
			SVLFLAGS="$SVLFLAGS $1"
			shift
			;;
		-silent )
			# exp.open and svl support -silent
			FSPOPEN_SILENT=1
			EXPFLAGS="$EXPFLAGS $1"
			SVLFLAGS="$SVLFLAGS $1"
			# cancel -silent option, which has been added to
			# $EXPFLAGS and $SVLFLAGS
			EXPFLAGS_DEFAULT=""
			SVLFLAGS_DEFAULT=""
			shift
			;;
		-verbose )
			# exp.open supports -verbose
			FSPOPEN_SILENT=0
			EXPFLAGS="$EXPFLAGS $1"
			# cancel -silent option, which must not be given
			EXPFLAGS_DEFAULT=""
			SVLFLAGS_DEFAULT=""
			shift
			;;
		-root )
			if [ $# -lt 2 ]
			then
				FSPOPEN_ERROR "missing value for option $1"
			fi
			F2LFLAGS="$F2LFLAGS $1 $2"
			shift 2
			;;
		-branching | -deadpreserving | -weaktrace | -strong )
			EXPFLAGS="$EXPFLAGS $1"
			shift
			;;
		-* )
			FSPOPEN_ERROR "unknown option \`\`$1''"
			;;
		* )
			break
			;;
	esac
done

# -----------------------------------------------------------------------------

# phase 2: parsing the FSP filename (the value of $FILE may contain spaces)

OPEN_CAESAR_SOURCE="$1"
export OPEN_CAESAR_SOURCE

PREFIX=`"$CADP"/src/com/cadp_basename "$1" .lts`
FILE=`dirname "$1"`/"$PREFIX"

if [ ! -f "$FILE.lts" ]
then
	FSPOPEN_ERROR "file \`\`$FILE.lts'' does not exist"
fi

shift

if [ $# -lt 1 ]
then
	FSPOPEN_ERROR "missing user program filename (.a, .c, or .o) argument"
fi

if [ "$1" = "-" ]
then
	FSPOPEN_TRANSLATE_ONLY=1
fi

# -----------------------------------------------------------------------------

# phase 3: setting FSPGEN

if [ "$FSPGEN" != "" -a "$FSPOPEN_DEBUG" = 0 ]
then
	echo "$COMMAND: WARNING ignoring value of \`\`\$FSPGEN''"
fi
if [ "$FSPGEN" = "" -o "$FSPOPEN_DEBUG" = 0 ]
then
	FSPGEN=`"$CADP"/src/com/cadp_temporary -d $COMMAND`
fi
export FSPGEN

REMOVE_FILES=1
# $PREFIX and $FSPGEN are defined: allow removal by CLEAN_EXIT

# -----------------------------------------------------------------------------

# phase 4a: calling fsp2lotos

FSPOPEN_MESSAGE "translating \`\`$FILE.lts'' to \`\`$PREFIX.exp''..."

"$FSP2LOTOS" $F2LFLAGS "$FILE.lts"

# phase 4b: calling SVL

FSPOPEN_MESSAGE "generating BCG graphs for \`\`$PREFIX.exp''..."

export SVLFLAGS
export SVLFLAGS_DEFAULT
export PREFIX
(
	cd "$FSPGEN"
	svl $SVLFLAGS $SVLFLAGS_DEFAULT "$PREFIX"
)

# -----------------------------------------------------------------------------

# phase 5: moving needed files from FSPGEN to the current directory


"$CADP"/src/com/cadp_replace "$FSPGEN/$PREFIX.exp" . "generated by fsp2lotos"

if [ -f "$FSPGEN/$PREFIX.ren" ]
then
	"$CADP"/src/com/cadp_replace "$FSPGEN/$PREFIX.ren" . "generated by fsp2lotos"
fi

for BCG_FILE in `GET_BCG_FILES "$PREFIX.exp"`
do
	"$CADP"/src/com/cadp_replace "$FSPGEN/$BCG_FILE" . ""
done

if [ "$FSPOPEN_TRANSLATE_ONLY" = 1 ]
then
	# stop here, without calling exp.open
	CLEAN_EXIT 0
fi

# -----------------------------------------------------------------------------

# phase 6: calling EXP.OPEN

OPEN_CAESAR_FOREGROUND_EXECUTION=1
export OPEN_CAESAR_FOREGROUND_EXECUTION
# Open Caesar graphical tools must execute in foreground to avoid deletion
# of temporary files before they terminate

FSPOPEN_MESSAGE "calling exp.open for \`\`$PREFIX.exp''..."

exp.open $EXPFLAGS $EXPFLAGS_DEFAULT "$PREFIX.exp" "$@"

# -----------------------------------------------------------------------------

# phase 7: removing files and exiting

CLEAN_EXIT 0

# -----------------------------------------------------------------------------
